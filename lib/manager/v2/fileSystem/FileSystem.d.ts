/// <reference types="node" />
import { PrivilegeManagerInfo, AvailableLocksInfo, CopyInfo, CreateInfo, CreationDateInfo, DeleteInfo, DisplayNameInfo, ETagInfo, LastModifiedDateInfo, LockManagerInfo, MimeTypeInfo, MoveInfo, OpenReadStreamInfo, OpenWriteStreamInfo, PropertyManagerInfo, ReadDirInfo, RenameInfo, SizeInfo, TypeInfo } from './ContextInfo';
import { Readable, Writable } from 'stream';
import { RequestContext } from '../../../server/v2/RequestContext';
import { BasicPrivilege, PrivilegeManager } from '../../../user/v2/privilege/PrivilegeManager';
import { LockKind } from '../../../resource/lock/LockKind';
import { Lock } from '../../../resource/lock/Lock';
import { Path } from '../Path';
import { ResourceType, SimpleCallback, Return2Callback, ReturnCallback, SubTree, OpenWriteStreamMode } from './CommonTypes';
import { ContextualFileSystem } from './ContextualFileSystem';
import { ILockManager } from './LockManager';
import { IPropertyManager } from './PropertyManager';
import { Resource } from './Resource';
import { ISerializableFileSystem, FileSystemSerializer } from './Serialization';
export declare abstract class FileSystem implements ISerializableFileSystem {
    private __serializer;
    constructor(serializer: FileSystemSerializer);
    serializer(): FileSystemSerializer;
    contextualize(ctx: RequestContext): ContextualFileSystem;
    resource(ctx: RequestContext, path: Path): Resource;
    fastExistCheckEx(ctx: RequestContext, _path: Path | string, errorCallback: SimpleCallback, callback: () => void): void;
    fastExistCheckExReverse(ctx: RequestContext, _path: Path | string, errorCallback: SimpleCallback, callback: () => void): void;
    protected fastExistCheck(ctx: RequestContext, _path: Path | string, callback: (exists: boolean) => void): void;
    protected _fastExistCheck?(ctx: RequestContext, path: Path, callback: (exists: boolean) => void): void;
    create(ctx: RequestContext, path: Path | string, type: ResourceType, callback: SimpleCallback): void;
    create(ctx: RequestContext, path: Path | string, type: ResourceType, createIntermediates: boolean, callback: SimpleCallback): void;
    protected _create?(path: Path, ctx: CreateInfo, callback: SimpleCallback): void;
    etag(ctx: RequestContext, _path: Path | string, callback: ReturnCallback<string>): void;
    protected _etag?(path: Path, ctx: ETagInfo, callback: ReturnCallback<string>): void;
    delete(ctx: RequestContext, path: Path | string, callback: SimpleCallback): void;
    delete(ctx: RequestContext, path: Path | string, depth: number, callback: SimpleCallback): void;
    protected _delete?(path: Path, ctx: DeleteInfo, callback: SimpleCallback): void;
    openWriteStream(ctx: RequestContext, path: Path | string, callback: Return2Callback<Writable, boolean>): void;
    openWriteStream(ctx: RequestContext, path: Path | string, estimatedSize: number, callback: Return2Callback<Writable, boolean>): void;
    openWriteStream(ctx: RequestContext, path: Path | string, targetSource: boolean, callback: Return2Callback<Writable, boolean>): void;
    openWriteStream(ctx: RequestContext, path: Path | string, targetSource: boolean, estimatedSize: number, callback: Return2Callback<Writable, boolean>): void;
    openWriteStream(ctx: RequestContext, path: Path | string, mode: OpenWriteStreamMode, callback: Return2Callback<Writable, boolean>): void;
    openWriteStream(ctx: RequestContext, path: Path | string, mode: OpenWriteStreamMode, estimatedSize: number, callback: Return2Callback<Writable, boolean>): void;
    openWriteStream(ctx: RequestContext, path: Path | string, mode: OpenWriteStreamMode, targetSource: boolean, callback: Return2Callback<Writable, boolean>): void;
    openWriteStream(ctx: RequestContext, path: Path | string, mode: OpenWriteStreamMode, targetSource: boolean, estimatedSize: number, callback: Return2Callback<Writable, boolean>): void;
    protected _openWriteStream?(path: Path, ctx: OpenWriteStreamInfo, callback: ReturnCallback<Writable>): void;
    openReadStream(ctx: RequestContext, path: Path | string, callback: ReturnCallback<Readable>): void;
    openReadStream(ctx: RequestContext, path: Path | string, estimatedSize: number, callback: ReturnCallback<Readable>): void;
    openReadStream(ctx: RequestContext, path: Path | string, targetSource: boolean, callback: ReturnCallback<Readable>): void;
    openReadStream(ctx: RequestContext, path: Path | string, targetSource: boolean, estimatedSize: number, callback: ReturnCallback<Readable>): void;
    protected _openReadStream?(path: Path, ctx: OpenReadStreamInfo, callback: ReturnCallback<Readable>): void;
    move(ctx: RequestContext, pathFrom: Path | string, pathTo: Path | string, callback: ReturnCallback<boolean>): void;
    move(ctx: RequestContext, pathFrom: Path | string, pathTo: Path | string, overwrite: boolean, callback: ReturnCallback<boolean>): void;
    protected _move?(pathFrom: Path, pathTo: Path, ctx: MoveInfo, callback: ReturnCallback<boolean>): void;
    copy(ctx: RequestContext, pathFrom: Path | string, pathTo: Path | string, callback: ReturnCallback<boolean>): void;
    copy(ctx: RequestContext, pathFrom: Path | string, pathTo: Path | string, depth: number, callback: ReturnCallback<boolean>): void;
    copy(ctx: RequestContext, pathFrom: Path | string, pathTo: Path | string, overwrite: boolean, callback: ReturnCallback<boolean>): void;
    copy(ctx: RequestContext, pathFrom: Path | string, pathTo: Path | string, overwrite: boolean, depth: number, callback: ReturnCallback<boolean>): void;
    protected _copy?(pathFrom: Path, pathTo: Path, ctx: CopyInfo, callback: ReturnCallback<boolean>): void;
    rename(ctx: RequestContext, pathFrom: Path | string, newName: string, callback: ReturnCallback<boolean>): void;
    rename(ctx: RequestContext, pathFrom: Path | string, newName: string, overwrite: boolean, callback: ReturnCallback<boolean>): void;
    protected _rename?(pathFrom: Path, newName: string, ctx: RenameInfo, callback: ReturnCallback<boolean>): void;
    mimeType(ctx: RequestContext, path: Path | string, callback: ReturnCallback<string>): void;
    mimeType(ctx: RequestContext, path: Path | string, targetSource: boolean, callback: ReturnCallback<string>): void;
    protected _mimeType?(path: Path, ctx: MimeTypeInfo, callback: ReturnCallback<string>): void;
    size(ctx: RequestContext, path: Path | string, callback: ReturnCallback<number>): void;
    size(ctx: RequestContext, path: Path | string, targetSource: boolean, callback: ReturnCallback<number>): void;
    protected _size?(path: Path, ctx: SizeInfo, callback: ReturnCallback<number>): void;
    availableLocks(ctx: RequestContext, path: Path | string, callback: ReturnCallback<LockKind[]>): void;
    protected _availableLocks?(path: Path, ctx: AvailableLocksInfo, callback: ReturnCallback<LockKind[]>): void;
    lockManager(ctx: RequestContext, path: Path | string, callback: ReturnCallback<ILockManager>): void;
    protected abstract _lockManager(path: Path, ctx: LockManagerInfo, callback: ReturnCallback<ILockManager>): void;
    propertyManager(ctx: RequestContext, path: Path | string, callback: ReturnCallback<IPropertyManager>): void;
    protected abstract _propertyManager(path: Path, ctx: PropertyManagerInfo, callback: ReturnCallback<IPropertyManager>): void;
    readDir(ctx: RequestContext, path: Path | string, callback: ReturnCallback<string[]>): void;
    readDir(ctx: RequestContext, path: Path | string, retrieveExternalFiles: boolean, callback: ReturnCallback<string[]>): void;
    protected _readDir?(path: Path, ctx: ReadDirInfo, callback: ReturnCallback<string[] | Path[]>): void;
    creationDate(ctx: RequestContext, path: Path | string, callback: ReturnCallback<number>): void;
    protected _creationDate?(path: Path, ctx: CreationDateInfo, callback: ReturnCallback<number>): void;
    lastModifiedDate(ctx: RequestContext, path: Path | string, callback: ReturnCallback<number>): void;
    protected _lastModifiedDate?(path: Path, ctx: LastModifiedDateInfo, callback: ReturnCallback<number>): void;
    webName(ctx: RequestContext, path: Path | string, callback: ReturnCallback<string>): void;
    displayName(ctx: RequestContext, path: Path | string, callback: ReturnCallback<string>): void;
    protected _displayName?(path: Path, ctx: DisplayNameInfo, callback: ReturnCallback<string>): void;
    type(ctx: RequestContext, path: Path | string, callback: ReturnCallback<ResourceType>): void;
    protected abstract _type(path: Path, ctx: TypeInfo, callback: ReturnCallback<ResourceType>): void;
    addSubTree(ctx: RequestContext, subTree: SubTree, callback: SimpleCallback): any;
    addSubTree(ctx: RequestContext, resourceType: ResourceType, callback: SimpleCallback): any;
    addSubTree(ctx: RequestContext, rootPath: Path | string, subTree: SubTree, callback: SimpleCallback): any;
    addSubTree(ctx: RequestContext, rootPath: Path | string, resourceType: ResourceType, callback: SimpleCallback): any;
    listDeepLocks(ctx: RequestContext, startPath: Path | string, callback: ReturnCallback<{
        [path: string]: Lock[];
    }>): any;
    listDeepLocks(ctx: RequestContext, startPath: Path | string, depth: number, callback: ReturnCallback<{
        [path: string]: Lock[];
    }>): any;
    getFullPath(ctx: RequestContext, callback: ReturnCallback<Path>): any;
    getFullPath(ctx: RequestContext, path: Path | string, callback: ReturnCallback<Path>): any;
    localize(ctx: RequestContext, fullPath: Path, callback: ReturnCallback<Path[]>): any;
    localize(ctx: RequestContext, fullPath: Path[], callback: ReturnCallback<Path[]>): any;
    localize(ctx: RequestContext, fullPath: string, callback: ReturnCallback<Path[]>): any;
    localize(ctx: RequestContext, fullPath: string[], callback: ReturnCallback<Path[]>): any;
    localize(ctx: RequestContext, fullPath: (string | Path)[], callback: ReturnCallback<Path[]>): any;
    checkPrivilege(ctx: RequestContext, path: Path | string, privilege: BasicPrivilege, callback: ReturnCallback<boolean>): any;
    checkPrivilege(ctx: RequestContext, path: Path | string, privileges: BasicPrivilege[], callback: ReturnCallback<boolean>): any;
    checkPrivilege(ctx: RequestContext, path: Path | string, privilege: string, callback: ReturnCallback<boolean>): any;
    checkPrivilege(ctx: RequestContext, path: Path | string, privileges: string[], callback: ReturnCallback<boolean>): any;
    checkPrivilege(ctx: RequestContext, path: Path | string, privileges: BasicPrivilege | BasicPrivilege[], callback: ReturnCallback<boolean>): any;
    checkPrivilege(ctx: RequestContext, path: Path | string, privileges: string | string[], callback: ReturnCallback<boolean>): any;
    privilegeManager(ctx: RequestContext, path: Path | string, callback: ReturnCallback<PrivilegeManager>): void;
    protected _privilegeManager?(path: Path, info: PrivilegeManagerInfo, callback: ReturnCallback<PrivilegeManager>): any;
    isLocked(ctx: RequestContext, path: Path | string, callback: ReturnCallback<boolean>): void;
    serialize(callback: ReturnCallback<any>): void;
}
